## Dependencies

The script that is sourced contains functions that can be found in the [setup](../00-setup.qmd)

```{r, cache=FALSE}
source("utils.R")
```

## Setup

```{r, cache=FALSE}
#| label: load-data
spe <- readRDS("../data/spe.rds")

#define the Z-stacks that you want to compare
zstack_list <- list("-0.09", "0.01", "0.21")

#define the celltype that you want to compare across the stacks - hereby we assume independence across the z-stacks which is an assumption that can be challenged
celltype_ls <- "OD Mature"

selectZstacks <- function(zstack, spe){
  sub <- spe[, spe$sample_id == zstack]
  pp <- .ppp(sub, marks = "cluster_id")
  return(pp)
}
pp_ls <- lapply(zstack_list, selectZstacks, spe)
names(pp_ls) <- zstack_list
```

The theory of spatial point patterns is discussed in great detail in [@baddeleySpatialPointPatterns2015]. The book has an accompanying package called `r BiocStyle::CRANpkg('spatstat')` which offers great functionality to the theoretical concepts described in the book [@baddeleySpatstatPackageAnalyzing2005]. This chapter relies heavily on both publications.

## Concepts and Definitions of Point Processes

### Point Process

In point pattern analysis we assume that the patterns we observe are a realisation of a stochastic process called a point process. The inferences we make about the point pattern are based on the point process. For example, if a pattern is created by a Poisson point process it will be evenly distributed in the observation window [@baddeleySpatialPointPatterns2015, pp. 127].

When considering a pattern with $m$ multiple types, as we do in the [@moffittMolecularSpatialFunctional2018] dataset, there are two distinct ways of looking at the data. One can view the pattern as a multitype point pattern, where all the points are sampled from the same point process. The other option is to consider the pattern as a multivariate point pattern, where the points come from $m$ distinct point processes. The distinction between these two views lies in the assumption that in the multitype framework all points stem from a single point process, while in the multivariate framework, types stem from distinct point processes, allowing us to consider dependencies of individual types. Whether or not the patterns stem from the same point process depends on the biological question. If we analyse two cell types within one slice of a tissue, we should consider them as being sampled from one point process. However, if we consider the distribution of a cell type in two slices of the same tissue we have grounds to consider them as distinct processes [@baddeleySpatialPointPatterns2015, pp. 564-565].

### Observation Windows

Most often, one does not observe the entire point process, but only a subset of the process. This is called window sampling. Instead of observing the entire pattern we examine a subset of this pattern in the so called window. For example, small microscopy windows provide a view of portions of a larger tissue slice [@baddeleySpatialPointPatterns2015, pp. 143-145].

There is another concept called the small world model. It assumes that points can only be observed in a finite small world and not beyond these boundaries. When thinking of an entire tissue, this is a very common scenario. Cells can only be observed within the tissue and not beyond. In this case, it would be correct to not assume a rectangular observation window but to use methods to estimate an unknown sampling window such as the Ripley-Rasson estimate of a spatial region [@baddeleySpatialPointPatterns2015, pp. 144-145; @ripleyFindingEdgePoisson1977].

The Ripley-Rasson method estimates convex observation windows. In our sample an ideal approximation would be non-convex, due to the tissue fold at the bottom. However, as non-convex estimation requires more complicated methods we will estimate the observation window using a Ripley-Rasson estimator.

```{r}
setRiprasWindows <- function(pp){
  Window(pp) <- ripras(pp)
  return(pp)
}
#the entire point patterns with the ripras windows
pp <- lapply(pp_ls, setRiprasWindows)

separateMarks <- function(pp){
  #split the multitype point process into several single type processes
  ppls <- split(pp)
  return (ppls)
}
#the point patterns separated by their marks
pp_ls <- lapply(pp, separateMarks)
```

An option to define arbitrary observation windows is to base them directly on the intensity of points. We do this using `r BiocStyle::Biocpkg('sosta')`. This package calculates an observation window based on an intensity threshold of points in space.

```{r, cache=FALSE, fig.height = 10, fig.width = 16, include=TRUE}
library('sosta')
### code adapted from https://bioconductor.org/packages/release/bioc/vignettes/sosta/inst/doc/StructureReconstructionVignette.html ###

#subset to three images
spe_sub <- subset(spe, ,sample_id %in% c('-0.09', '0.01', '0.21'))

# first we select the intensity thresholds for the binarisation of the image
n <- estimateReconstructionParametersSPE(
    spe_sub,
    marks = "cluster_id",
    imageCol = "sample_id",
    markSelect = NULL,
    plotHist = FALSE
)

thresSPE <- mean(n$thres)
bndwSPE <- mean(n$bndw)

# calculate the observation window based on the density
allStructs <- reconstructShapeDensitySPE(
    spe_sub,
    marks = "cluster_id",
    imageCol = "sample_id",
    markSelect = NULL,
    bndw = bndwSPE,
    thres = thresSPE,
    nCores = 1
)

p_ls <- lapply(list('-0.09', '0.01', '0.21'), function(elem){
    spe_sub <- subset(spe,,sample_id == elem)
    allStructs_sub <- subset(allStructs, sample_id == elem)
    p <- cbind(colData(spe_sub), spatialCoords(spe_sub)) |>
    as.data.frame() |>
    ggplot(aes(x = x, y = y)) +
    geom_point(size = 0.25) +
    geom_sf(
      data = allStructs_sub,
      fill = NA,
      color = "red",
      inherit.aes = FALSE, # this is important
      linewidth = 0.8
    ) +
    facet_grid(~sample_id)+
    theme_light()
    return(p)
})
patchwork::wrap_plots(p_ls)
```

Alternatively, one can lend from the concept of inhomogeneity correction (discussed later). Here, we calculate the density of the unmarked point pattern. We then scale this density by the step size of the image. This allows us to use inhomogeneous functions such as `Kinhom` with a custom intensity based on the unmarked point pattern as `lambdaX = dens_im_scaled`. Both the restriction of the observation window based on the density of points and the inhomogeneity correction via the scaled density of the unmarked point pattern are discussed in more detail in @emonsPastaPatternAnalysis2024

```{r, cache=FALSE, fig.height = 10, fig.width = 16, include=TRUE}
ppDens <- SPE2ppp(spe,
marks = "cluster_id", imageCol = "sample_id",
imageId = "-0.09"
)
#dens_im <- density()
dens_im <- density(unmark(ppDens))

# calculate the scale as we have less points compared to unmarked
scale <- sum(dens_im$v) / (dens_im$xstep * dens_im$ystep)

# scale the density
dens_im_scaled <- dens_im * scale

plot(dens_im_scaled)
```

### Complete Spatial Randomness

Complete spatial randomness (CSR) is often used as the null model for various point patterns. It is the result of a Poisson process. A completely spatial random process is characterised by two properties, homogeneity and independence, as discussed below [@baddeleySpatialPointPatterns2015, pp. 132].

#### Homogeneity

"Homogeneity \[...\] means that the expected number of points falling in a region $B$ should be proportional to its area $|B|$" [@baddeleySpatialPointPatterns2015, pp. 132] given a proportionality constant $\lambda$. The constant $\lambda$ represents the intensity of the process, i.e., the average number of points in a unit area [@baddeleySpatialPointPatterns2015, pp. 132-133]

$$
\mathbb{E}[X\cap B] = \lambda |B|.
\label{eq:expected_number_points}
$$

#### Independence

Independence implies that in two (non-overlapping) regions $A$ and $B$, the number of points $n(X\cap A)$ and $n(X\cap B)$ are independent random variables. In other words, the number of points in region $A$ does not affect the number of points in region $B$. [@baddeleySpatialPointPatterns2015, pp. 133].

### Inhomogeneous Poisson Process

A Poisson process that is spatially varying in its average density of points is called inhomogeneous. Here, the average density, $\lambda(u)$, sometimes known as the intensity function (see below), is a function of the spatial location $u$. In this case, the expected number of points within a region $B$, denoted by $\mu = n(X\cap B)$, is given by the integral of the intensity function over that region [@baddeleySpatialPointPatterns2015, pp. 138]

$$
\mu = \int_{B} \lambda(u) du.
\label{eq:expected_number_inhomogeneous}
$$ 

### Confounding between clustering and inhomogeneity

Often, it is hard to distinguish inhomogeneous intensity from genuine clustering of points. Patterns can arise from an inhomogeneous process or a clustered process and it is not straightforward to distinguish them: one is governed by different (inhomogeoenous) intensities whereas the other is due to interactions (clustering) between points [@baddeleySpatialPointPatterns2015, p. 151 ff.]. One way this can occur is if cells of different sizes are treated as points instead of considering their entire volume [@baddeleySpatialPointPatterns2015, p. 210 ff.].

### Isotropy

A point process is called isotropic, if its statistical properties are invariant to rotations; a CSR process is both stationary and isotropic [@baddeleySpatialPointPatterns2015, pp. 147].

### Stationarity

"A point process is called stationary if, when we view the process through a window $W$ , its statistical properties do not depend on the location of the window in two-dimensional space." [@baddeleySpatialPointPatterns2015, pp. 146]. This is the case for any homogeneous point process, where the statistical properties of the pattern are unchanged given shifting of the observation window. This means it is stationary in all statistical properties; first-order properties (e.g. intensity) and second-order properties (e.g. correlation) [@baddeleySpatialPointPatterns2015, pp. 218]. Not all metrics assume stationarity in its full sense. Inhomogeneous metrics only assume second-order / correlation stationarity. This means that while the intensity function can vary spatially (first-order stationarity is not given), the estimates of correlation functions (e.g. the inhomogeneous $K$-function) are expected to be consistent across different parts of the window [@baddeleySpatialPointPatterns2015, pp. 689 ff.].

### Local scaling

If a process is not correlation stationary, so the estimates of the inhomogeneous metric vary between locations, locally-scaled versions of the metric are applicable. This means that in subregions, the process is still stationary and isotropic, but there is a rescaling factor that can vary across the total process [@baddeleySpatialPointPatterns2015, pp. 246-247].

To test the assumption of inhomogeneity, we can use a permutation test. In this scenario, we split the patterns into quadrats and compare the estimated functions between the quadrats. It should be noted that this test depends on the arbitrary definition of the quadrats. The chosen patterns are not independent but result as marks from an overall point-pattern. Therefore, the permutation approach is questionable [@baddeleySpatialPointPatterns2015, pp. 689-693].

```{r, warning=FALSE, include=FALSE,eval=FALSE}
# This function performs permutation test for different point patterns
permutation_test <- function(pp, mark, split, minpoints) {
  pp_sel <-  subset(pp, marks %in% mark, drop = TRUE)
  
  rho_est <- rhohat(unmark(pp_sel), "x", method="tr")
  lambda <- predict(rho_est)

  tesselation <- quantess(unmark(pp_sel), "x", 3)
  tesselation_split <- nestsplit(pp_sel, tesselation, ny=split)
  
  plot(tesselation_split, main = mark)
  
  tesselation_split$inten <- factor(as.integer(tesselation_split$f1) <= 1, labels=c("Hi","Lo"))
  
  res.scaled <- studpermu.test(tesselation_split, pts ~ inten, summaryfunction=Kscaled,
                 minpoints = minpoints)
  
  res.inhom <- studpermu.test(tesselation_split, pts ~ inten, summaryfunction=Kinhom,
                 lambda=lambda, minpoints = minpoints)
  
  #p-value of the local-scaling test
  print(paste0(mark,' local scaling test ', res.scaled$p.value))
  
  #p-value of the inhomogeneity test
  print(paste0(mark,' inhomogeneity test ', res.inhom$p.value))
}
lapply(c("Microglia", "OD Mature", "Ependymal"), function(x) permutation_test(pp[['0.01']], x, split = 3, minpoints = 10))
```

<!-- The p-value of the test for local scaling for microglia cells is $<0.05$ which indicates that the assumption of local scaling is rejected. Therefore, the distribution of microglia cells is not a scaled version of an overall distribution pattern. The p-value of the test for inhomogeneity for both microglia cells is $>0.05$ indicating that the assumption of correlation stationarity is not rejected. In this case we can use the inhomogeneous version of the K-function which assumes correlation stationarity. -->

<!-- For ependymal and OD mature cells however, the p-values for both the local scaling test and the inhomogeneity test are $>0.05$ which means that for this choice of quadrats both the correlation stationarity assumption and the local scaling assumption can't be rejected. -->

As the interpretation of the permutation test is highly dependent on the quadrats, the results should be interpreted with care. Both inhomogeneous and locally scaled versions of the summary functions have support and both offer interesting insights into the spatial pattern. Therefore, we will compare all versions and show what the choice of metrics means for their interpretation.

### Intensity

Intensity is the expected density of points per unit area. It can be interpreted as the rate of occurrence or the abundance of events. The intensity represents a first order property because it is related to the expected number of points. More formally the average intensity of a point process is defined as:

$$
\bar{\lambda} = \frac{n(x)}{|W|}
\label{eq:average_intensity}
$$

As this is an average over the entire window, it is a good estimate for a homogeneous point process [@baddeleySpatialPointPatterns2015, pp. 157-160].

#### Estimating Intensity

For a homogeneous point process, the intensity can be estimated in a simplistic way: summing the individual intensities of the marks [@baddeleySpatialPointPatterns2015, pp. 161].

```{r, cache=FALSE}
intensityPointProcess <- function(pp,mark) if(mark) intensity(pp) else sum(intensity(pp))

intensityPointProcess(pp_ls[['0.01']], mark = FALSE) %>% round(6)
```

Otherwise, we can compute the intensity for each mark individually.

```{r, cache=FALSE}
intensityPointProcess(pp_ls[['0.01']], mark = TRUE) %>% round(8)
```

#### Kernel Estimation

In kernel estimation, we try to estimate the intensity function $\lambda(u)$ of the point process. There is a wide variety of kernel estimators, see [@baddeleySpatialPointPatterns2015, pp. 168], but a popular choice is the isotropic Gaussian kernel where the standard deviation corresponds to the smoothing bandwidth [@baddeleySpatialPointPatterns2015, pp. 168].

```{r, fig.width=6, fig.height=6}
pp_sel <-  subset(pp_ls[['0.01']]$`OD Mature`, drop = TRUE)
Dens <- density.ppp(pp_sel, sigma = 50)
plot(Dens, main = 'Kernel Density (OD Mature cells)')
```

#### Quadrat Counting

In quadrat counting, all points falling into a given quadrat are counted. This gives an overview on the characteristics of the point pattern, such as correlation stationarity [@baddeleySpatialPointPatterns2015, pp. 163].

```{r, fig.width=12, fig.height=12, cache=FALSE, eval=FALSE}
Q5 <- quadratcount(pp_ls[['0.01']], nx=8, ny=8)
plot(unmark(pp[['0.01']]), main='Unmarked Point Pattern Quadrats')
plot(Q5, col='black', add=TRUE)
```

Under independence assumptions, the quadrat counts can be used for testing homogeneity, i.e., whether the points are distributed evenly across the quadrats [@baddeleySpatialPointPatterns2015, pp. 164-165].

```{r, cache=FALSE}
val <- quadrat.test(pp_ls[['0.01']]$`OD Mature`, 5, alternative="regular", method="MonteCarlo")
val
```

A p-value of `r val$p.value` indicates that the null hypothesis of irregularity can't be rejected at $\alpha = 0.05$. Thus, the point pattern of oligodendrocytes is strongly irregular.

Alternatively, we can inspect departures from the hypothesis that points were generated by a Poisson process. We can identify hotspots and coldspots by comparing the standard error of the `relrisk` function, which computes nonparamatric estimates of the relative risk by kernel smoothing, to the theoretical null distribution of points. The relative risk is the ratio of spatially varying probablilities of different types [@bullerAreasSpatialSegregation2020].

```{r, fig.width=8, fig.height=6}
# select marks
selection <- c('OD Mature', 'Ependymal', 'Microglia')
pp_sel <-  subset(pp[['0.01']], marks %in% selection, drop = TRUE)

f1 <- pValuesHotspotMarks(pp_sel)

# Plot significant p-values
plot(f1$p, main = "Significant difference\n to Poisson process alpha = 0.05")
```

### Testing for CSR

Whether or not a point process is completely spatially random (CSR) depends on two characteristics: points need to be distributed homogeneously and they have to be independent of each other (see definitions above). There are various ways to test for CSR, here we show the use-case of the clark-evans test [@baddeleySpatialPointPatterns2015, pp. 165-166].

```{r, cache=FALSE}
clarkevans.test(pp_ls[['0.01']]$`OD Mature`)
```
