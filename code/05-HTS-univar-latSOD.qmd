# Lattice data analysis -- univariate methods for HTS-based data

In this vignette we will show:

- Univariate lattice data analysis methods for HTS-based approaches.

- This includes global metrics on the entire field of view and local variants thereof. 

- The use case is a 10x Visium data set from @10xgenomicsAdultMouseKidney2021 downloaded from the [squidpy visium datasets](https://squidpy.readthedocs.io/en/stable/api/squidpy.datasets.visium.html) [@pallaSquidpyScalableFramework2022].

- The `R` implementations rely on the `r BiocStyle::Biocpkg('Voyager')` package. The data is represented as `r BiocStyle::Biocpkg('SpatialFeatureExperiment')` [@mosesVoyagerExploratorySinglecell2023]. Complementary resources using these methods are found in the [Voyager 10X Visium vignette](https://pachterlab.github.io/voyager/articles/vig1_visium_basic.html).

- `Python` implementations rely on the the packages [esda](https://pysal.org/esda/), [pysal](https://pysal.org/) and [squidpy](https://squidpy.readthedocs.io/en/stable/) [@reyPySALPythonLibrary2010; @pallaSquidpyScalableFramework2022]. Data representation rely on the [anndata](https://anndata.readthedocs.io/en/stable/) structure [@virshup2024anndata].

## Dependencies

::: {.panel-tabset}

### `R`

```{r}
#| label: load-libs
#| message: false
#| warning: false
#| results: hide
source("utils.R")

roma_colors <- data.frame(roma_colors = scico::scico(256, palette = 'roma'))
write.csv(roma_colors , "../misc/roma_colors.csv")

theme_set(theme_light())
```

### `Python`

```{python}
import numpy as np
import scanpy as sc
import squidpy as sq
from esda.moran import Moran, Moran_Local
from esda.geary import Geary
from esda import Geary_Local, G_Local, LOSH
from esda.getisord import G
from scipy.stats import false_discovery_control
from libpysal.weights import W
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap, LinearSegmentedColormap
import warnings

warnings.filterwarnings("ignore")

df_cmap_continuous = pd.read_csv("../misc/roma_colors.csv", index_col=0)
cmap_continuous = LinearSegmentedColormap.from_list("roma", list(df_cmap_continuous["roma_colors"])).reversed()

#load the dataset and store as anndata object
adata = sq.datasets.visium("Visium_FFPE_Mouse_Kidney")
# normalise counts already here that both R and python have same values
adata.raw = adata.copy()
sc.pp.normalize_total(adata)
sc.pp.log1p(adata)
# save file as h5ad
adata.write("../data/adata_neighbors.h5ad")
```

:::

## Setup and Preprocessing

::: {.panel-tabset}

### `R`

```{r}
#| label: load-data
library(SpatialExperiment)

sce <- zellkonverter::readH5AD("../data/adata_neighbors.h5ad")
colnames(reducedDim(sce, "spatial")) <- c("x", "y")
spe <- toSpatialExperiment(sce)

spatialCoords(spe) <- reducedDim(sce, "spatial")

sfe <- SpatialFeatureExperiment::toSpatialFeatureExperiment(spe)

# the counts are already normalised
assayNames(sfe) <- "logcounts"

sfe
```

### `Python`

```{python}
# invert the spatial coordinates
adata.obsm["spatial"][:, 1] = adata.obsm["spatial"][:, 1].max() - adata.obsm["spatial"][:, 1]
adata
```

::: 


Given this data from 10x we choose two genes to analyse henceforth, named _Slc5a12_ (solute carrier family 5, member 12) and _Calr_ (calreticulin) [@10xgenomicsAdultMouseKidney2021]. For further information on the preprocessing of visium datasets, please refer to the [Voyager 10X Visium vignette](https://pachterlab.github.io/voyager/articles/vig1_visium_basic.html).

Here we set the arguments for the examples below.

::: {.panel-tabset}

### `R`

```{r}
features <- c("Slc5a12", "Calr")
colGraphName <- "visium"
colGeometryName <- "centroids"
pointsize <- 3
```

### `Python`

```{python}
# predefine genes
features = ["Slc5a12", "Calr"]
figsize = (len(features)*5, 5)
pointsize = 25
```

:::

{{< include theory/02-theory-reg-lattice.qmd >}}

{{< include theory/04-theory-univar-lattice.qmd >}}

# Appendix

## Session info

```{r}
#| label: session-info
sessionInfo()
```
