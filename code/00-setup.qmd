# Technology for analysis

R and Python have become the most popular languages for analysis of (spatial) omics data over the last few years. Traditionally, R has been the main language used in Statistics and therefore the number of Statistics libraries is still larger compared to Python. Python, however, has become the language of choice for tasks such as image analysis and machine learning where R lacks behind [@mosesMuseumSpatialTranscriptomics2022].

Our goal is to use the best of both worlds. In this spirit, we try to show analyses in both R and Python where possible. Especially in point pattern analysis however, the existing libraries in Python lack behind such that we focus on the analysis in R in these chapters.

To facilitate the transition between R and Python, we will show how to convert objects between the languages such that analysis can be transitioned from one language to another.

In R we will use `r BiocStyle::Biocpkg('SpatialExperiment')` and  `r BiocStyle::Biocpkg('SpatialFeatureExperiment')` objects [@righelliSpatialExperimentInfrastructureSpatiallyresolved2022, @mosesVoyagerExploratorySinglecell2023]. The latter is an extension to the first and additionally contains geometric annotations that are encoded as simple features of the `r BiocStyle::CRANpkg('sf')` library [@pebesmaSpatialDataScience2023].

In Python we will use the `anndata` object [@virshup2024anndata].

## Conversion from R to Python

```{r}
suppressPackageStartupMessages({
  library(SpatialFeatureExperiment)
  library(SFEData)
  library(scater)
})
```

Here we will load a dataset by [@mckellarLargescaleIntegrationSinglecell2021] as a `r BiocStyle::Biocpkg('SpatialFeatureExperiment')` from the package `r BiocStyle::Biocpkg('SFEData')`.

```{r}
# Load the dataset
sfe <- SFEData::McKellarMuscleData(dataset = "full")
# Take spots that are covered with tissue
sfe_tissue <- sfe[, colData(sfe)$in_tissue]
# Filter out genes with no counts
sfe_tissue <- sfe_tissue[rowSums(counts(sfe_tissue)) > 0, ]
# Convert counts log-transformed normalized expression values
sfe_tissue <- scater::logNormCounts(sfe_tissue)
```

For the conversion from a `SingleCellExperiment` to a `AnnData` object we will use `r BiocStyle::Biocpkg('zellkonverter')` package. More details can be found in their vignettes. Note that the `SpatialExperiment` and `SpatialFeatureExperiment` objects inherit from the `SingleCellExperiment` class, therefore we can use the function `SCE2AnnData`. 

```{r}
# Convert to AnnData object
ann <-  zellkonverter::SCE2AnnData(sfe_tissue)
anndata::write_h5ad(ann, "../data/McKellarMuscleData.h5ad")
```

The spatial coordinates however are not directly converted and stored as `x` and `y` in the `obs` data frame.

```{python}
import numpy as np
import scanpy as sc
import squidpy as sq

# Read AnnData object
adata = sc.read_h5ad("../data/McKellarMuscleData.h5ad")
# Create the spatial coordinates in AnnData
adata.obsm['spatial'] = np.array(list(zip((adata.obs['x'] * -1), adata.obs['y'])))
```

We preform more preprocessing such that we can use all function of the packages [esda](https://pysal.org/esda/) and [pysal](https://pysal.org/).

```{python}
adata.var_names = adata.var["symbol"]
adata.raw = adata.copy()
# Necessary for Local Moran function to work
adata.X = adata.layers["logcounts"].astype(np.float64) 
# Save for later use
adata.write("../data/McKellarMuscleData_processed.h5ad")
```

## Conversion from Python to R

Here we will use 10x Visium data set from @10xgenomicsAdultMouseKidney2021 downloaded from the [squidpy visium datasets](https://squidpy.readthedocs.io/en/stable/api/squidpy.datasets.visium.html) [@pallaSquidpyScalableFramework2022].

```{python}
import numpy as np
import scanpy as sc

#load the dataset and store as anndata object
adata = sq.datasets.visium("Visium_FFPE_Mouse_Kidney")
# normalise counts already here that both R and python have same values
adata.raw = adata.copy()
sc.pp.normalize_total(adata)
sc.pp.log1p(adata)
# save file as h5ad
adata.write("../data/adata_neighbors.h5ad")
```

For the conversion from a `AnnData` to a `SingleCellExperiment` object we will again use the `r BiocStyle::Biocpkg('zellkonverter')` package.

```{r}
library(SpatialFeatureExperiment)
library(SpatialExperiment)

sce <- zellkonverter::readH5AD("../data/adata_neighbors.h5ad")
colnames(reducedDim(sce, "spatial")) <- c("x", "y")
```

Now we have to convert to a `SpatialExperiment` / `SpatialFeatureExperiment` object.

```{r}
spe <- toSpatialExperiment(sce)
# Reduced dimension to spatial coords
spatialCoords(spe) <- reducedDim(sce, "spatial")
# SpatialExperiment to SpatialFeatureExperiment
sfe <- SpatialFeatureExperiment::toSpatialFeatureExperiment(spe)
# the counts were already normalised in Python
assayNames(sfe) <- "logcounts"
saveRDS(sfe, "../data/sfe_Visium_Mouse_Kidney.rds")
```

## Conversion from Seurat to Bioconductor objects

Another popular analysis framework for single cell and spatial omics in R is [Seurat](https://satijalab.org/seurat/). To convert from `Seurat` object so `SpatialExperiment` you can use `Seurat::as.SingleCellExperiment(x)`. For more details please have a look at this [vignette](https://satijalab.org/seurat/archive/v3.1/conversion_vignette). From there on you can convert to a `SpatialExperiment` object using `toSpatialExperiment()`.

Alternatively, to convert from `Seurat` to `SpatialFeatureExperiment` one can use the `toSpatialFeatureExperiment` function as specified in the `r BiocStyle::Biocpkg('SpatialFeatureExperiment')` [vignette](https://bioconductor.org/packages/release/bioc/vignettes/SpatialFeatureExperiment/inst/doc/SFE.html#38_Coercion_from_Seurat).

# Datasets

## Dependencies

```{r}
#| label: load-libs
#| message: false
#| warning: false
library(ggplot2)
library(RColorBrewer)
library(ExperimentHub)
library(SpatialExperiment)
library(STexampleData)
```

# Molecule-based dataset

Here we will process the MERFISH data from @moffittMolecularSpatialFunctional2018 to be used as a `r BiocStyle::Biocpkg('SpatialExperiment')` [@righelliSpatialExperimentInfrastructureSpatiallyresolved2022] in our vigenttes.

## Setup

The dataset is loaded from ExperimentHub

```{r}
#| label: load-data
#| message: false
eh <- ExperimentHub()
q <- query(eh, "MERFISH")
df <- eh[["EH7546"]]
```

## Wrangling

```{r}
#| label: make-spe
# extract cell metadata
i <- seq_len(9)
cd <- data.frame(df[, i], row.names = 1)

# set sample identifiers
id <- grep("Bregma", names(cd))
names(cd)[id] <- "sample_id"

# rename spatial coordinates
xy <- grep("Centroid", names(cd))
xy <- names(cd)[xy] <- c("x", "y")

# simplify annotations
cd$cluster_id <- cd$Cell_class
for (. in c("Endothelial", "OD Mature", "OD Immature"))
  cd$cluster_id[grep(., cd$cluster_id)] <- .

# extract & sparsify assay data
y <- data.frame(df[, -i], row.names = df[, 1])
y <- as(t(as.matrix(y)), "dgCMatrix")

# construct SPE
(spe <- SpatialExperiment(
  assays = list(exprs  = y),
  spatialCoordsNames = xy,
  colData = cd))
```

```{r}
#| label: plot-data
gg <- data.frame(spatialCoords(spe), colData(spe))
pal <- brewer.pal(length(unique(gg$cluster_id)), "Paired")
ggplot(gg, aes(x, y, col = cluster_id)) +
  facet_wrap(~ sample_id, scales = "free") +
  geom_point(size = 0.1) + scale_color_manual(values = pal) +
  guides(col = guide_legend(override.aes = list(size = 2))) +
  theme_void() + theme(legend.key.size = unit(0.5, "lines"))
```

## Save data

```{r}
#| label: save-data
# Define the directory and file paths
dir_path <- "../data"

# Check if the directory exists, and create it if it doesn't
if (!dir.exists(dir_path)) {
  dir.create(dir_path)
}

saveRDS(spe, "../data/spe.rds")
```

# Packages and helpful functions for later use

```{r}
suppressPackageStartupMessages({
  library(SpatialExperiment)
  library(spatstat)
  library(dplyr)
  library(ggplot2)
  library(rlang)
  library(stats)
  library(STexampleData)
  library(patchwork)
  library(reshape2)
  library(sf)
  library(rgeoda)
  library(Voyager)
  library(SpatialFeatureExperiment)
  library(SFEData)
  library(scran)
  library(scater)
  library(tmap)
  library(spdep)
  library(stringr)
  library(magrittr)
  library(bluster)
  library(dixon)
  library(ExperimentHub)
  library(STexampleData)
})
```


```{r}
.ppp <- \(spe, marks = NULL) {
  xy <- spatialCoords(spe)
  w <- owin(range(xy[, 1]), range(xy[, 2]))
  m <- if (is.character(marks)) {
    stopifnot(
      length(marks) == 1,
      marks %in% c(
        gs <- rownames(spe),
        cd <- names(colData(spe))))
    if (marks %in% gs) {
      assay(spe)[marks, ]
    } else if (marks %in% cd) {
      spe[[marks]]
    } else stop("'marks' should be in ",
      "'rownames(.)' or 'names(colData(.))'")
  }
  ppp(xy[, 1], xy[, 2], window = w, marks = factor(m))
}
```


```{r}
pValuesHotspotMarks <- function(pp, alpha = 0.05){
  # Code source: https://idblr.rbind.io/post/pvalues-spatial-segregation/
  
  # Significant p-values assumming normality of the Poisson process
  ## relrisk() computes standard errors based on asymptotic theory, assuming a Poisson process
  # call relative risk function
  f1 <- relrisk(pp_sel,se=TRUE)
  
  z <- qnorm(alpha/2, lower.tail = F)     # z-statistic
  f1$u <- f1$estimate + z*f1$SE           # Upper CIs
  f1$l <- f1$estimate - z*f1$SE           # Lower CIs
  mu_0 <- as.vector(table(spatstat.geom::marks(pp))/pp$n) # null expectations by type
  f1$p <- f1$estimate # copy structure of pixels, replace values
  for (i in 1:length(f1$p)) {
    f1$p[[i]]$v <- factor(ifelse(mu_0[i] > f1$u[[i]]$v, "lower",
                                ifelse( mu_0[i] < f1$l[[i]]$v, "higher", "none")),
                          levels = c("lower", "none", "higher"))
  }
  return(f1)
}

pValuesHotspot <- function(pp, alpha = 0.05){
  # Code source: https://idblr.rbind.io/post/pvalues-spatial-segregation/
  # density estimate for all marks
  f1 <- density(unmark(pp), se = TRUE)
  # Significant p-values assumming normality of the Poisson process
  z <- qnorm(alpha/2, lower.tail = F)     # z-statistic
  f1$u <- f1$estimate + z*f1$SE           # Upper CIs
  f1$l <- f1$estimate - z*f1$SE           # Lower CIs
  mu_0 <- intensity(unmark(pp)) # null expectations by type
  f1$p <- f1$estimate # copy structure of pixels, replace values
  f1$p$v <- factor(ifelse(mu_0 > f1$u$v, "lower",
                          ifelse( mu_0 < f1$l$v, "higher", "none")),
                   levels = c("lower", "none", "higher"))
  
  return(f1)
}
```



# Appendix

## Session info

```{r}
#| label: session-info
sessionInfo()
```
