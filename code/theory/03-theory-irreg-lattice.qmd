## Lattice data

A lattice consists of individual spatial units $D = \{A_1, A_2,...,A_n\}$ where the units do not overlap. The data is then a realisation of a random variable along the lattice $Y_i = Y (A_i)$ [@zuurAnalysingEcologicalData2007]. The lattice is irregular, if the units have variable size and are not spaced regularly, such as is the case with cells in tissue. 

More details about lattices can be found on [here](05-HTS-univar-latSOD.qmd## Regular lattice and spatial weight matrix).

## Spatial weight matrix

One of the challenges when working with (irregular) lattice data is the construction of a [neighbourhood graph](https://r-spatial.org/book/14-Areal.html) [@pebesmaSpatialDataScience2023]. The main question is, what to consider as neighbours, as this will affect downstream analyses. Various methods exist to define neighbours, such as contiguity-based neighbours (neighbours in direct contact), graph-based neighbours (e.g., $k$-nearest neighbours), distance-based neighbours or higher order neighbours [@getisSpatialWeightsMatrices2009; @zuurAnalysingEcologicalData2007; @pebesmaSpatialDataScience2023]. The documentation of the package `r BiocStyle::CRANpkg('spdep')` provides an [overview of the different methods](https://r-spatial.github.io/spdep/articles/nb.html) [@bivandPackagesAnalyzingSpatial2022].

We consider first contiguity-based neighbours. As cell segmentation is notoriously imperfect, we add a `snap` value, which means that we consider all cells with distance $20$ or less as contiguous [@pebesmaSpatialDataScience2023; @wangCellSegmentationImage2019].

```{r}
colGraph(sfe, "poly2nb") <-
  findSpatialNeighbors(sfe,
    type = "cellSeg",
    method = "poly2nb", # wraps the spdep function with the same name
    style = "W",
    snap = 20 # all cells with less distance  apart are considered contiguous
  )

p1 <- plotColGraph(sfe,
  colGraphName = "poly2nb",
  colGeometryName = "cellSeg",
  bbox =  c(xmin = 3500, xmax = 10000, ymin = 157200, ymax = 162200)
) + theme_void()
```

Alternatively, we can use a $k$-nearest neighbours approach. The choice of the number $k$ is somewhat arbitrary.

::: {.panel-tabset}

### `R`

```{r}
colGraph(sfe, "knn5") <-
  findSpatialNeighbors(sfe,
    method = "knearneigh", # wraps the spdep function with the same name
    k = 5,
    zero.policy = TRUE
  )

p2 <- plotColGraph(sfe,
  colGraphName = "knn5",
  colGeometryName = "cellSeg",
  bbox = c(xmin = 3500, xmax = 10000, ymin = 157200, ymax = 162200)
) + theme_void()

#calculate binary nearest neighbour weight matrix too
colGraph(sfe, "binary") <-
  findSpatialNeighbors(sfe,
    method = "knearneigh", # wraps the spdep function with the same name
    k = 5,
    zero.policy = TRUE,
    style = "B"
  )
```

### `Python`

```{python}
spatial_weights = KNN(KDTree(adata.obsm['spatial']), 5)
adata.obsp['spatial_connectivities'] = spatial_weights.sparse
```

::: 

The graphs below show noticeable differences. In the contiguous neighbour graph on the left (neighbours in direct contact), we can see the formation of distinct patches that are not connected to the rest of the tissue. In addition, some cells do not have any direct neighbours. In contrast, the $k$-nearest neighbours ($k$NN) graph on the right reveals that these patches tend to be connected to the rest of the structure.

::: {.panel-tabset}

### `R`

```{r}
#| fig-width: 15
#| fig-height: 10
p1 + p2
```

### `Python`

```{python}
#| fig-width: 15
#| fig-height: 10
fig, ax = plt.subplots(1, 1, figsize=(10, 10))
sq.pl.spatial_scatter(
    adata[adata.obsp["spatial_connectivities"].nonzero()[0], :],
    connectivity_key="spatial_connectivities",
    size=0.1,
    na_color="black",
    edges_color="black",
    edges_width=0.1,
    shape=None,
    library_id="spatial",
    ax=ax,
    fig=fig,
    crop_coord = (3500, 3999, 10000, 8999)
)
```

:::